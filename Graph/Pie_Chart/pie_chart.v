import time
import math
import json

fn get_angle(x int) int {
	mut reuslt := (x * 360) / 100
	
	return reuslt
}

fn get_index(x int, y int) int {
	mut reuslt := (25 * (y -1)) + (x-1)

	return reuslt
}

// return absolute number
fn abs(x int) int {
	// is not absolute
	if x.str().contains("-") {
		return x * -1
	} 
	// is absolute
	else {
		return x
	}
}

// check where draw pixel
fn sign(x int) int {
  if x > 0 {
    return 1
	}
  else if x < 0 {
    return -1
	}
  else { 
		return 0
	}
}

// function which draw lines using Bresenham's Algorithm.
fn draw_line(x1 int, y1 int, x2 int, y2 int, mut canvas []string) {
  mut x := x1
  mut y := y1
  mut dx := abs(x2 - x1 )
  mut dy := abs(y2 - y1 )
  mut s1 := sign(x2 - x1)
  mut s2 := sign(y2 - y1)
	mut interchange := "false"

	if dy > dx {
    mut t := dx
    dx = dy
    dy = t
    interchange = "true"
	} else {
		interchange = "false"
	}

	mut error := 2*dy - dx
  mut a := 2*dy
	mut b := 2*dy - 2*dx

	mut index := (25 * (y -1)) + (x-1)
	canvas[index] = "\u001b[31m# \u001b[0m"
	println(canvas.join("") )

	mut i := -1
	for i < (dx - 1) {
		i++

    if error < 0 {
      if interchange != "false" {
        y = y + s2
			} else {
        x = x + s1
				error = error + a
			}
		} else {
      y = y + s2
      x = x + s1
      error = error + b
		} 

		index = (25 * (y -1)) + (x-1)
		canvas[index] = "\u001b[31m# \u001b[0m"
		println(canvas.join("") )
	}
}

fn main() {
	mut first_value := 12
	mut second_value := 30
	mut third_value := 50
	
	mut first_value_angle := (get_angle(first_value) / 5)
	mut middle_point := [13,13]
	mut start_point := [1,13]


	mut canvas := [
		"  ", "  ", "  " "  ", "  ", "  ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  ", "  ", "  ", "  ", "  ", "  \n",
		"  ", "  ", "  " "  ", "  ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  ", "  ", "  ", "  ", "  \n",
		"  ", "  ", "  " "  ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  ", "  ", "  ", "  \n",
		"  ", "  ", "  " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  ", "  ", "  \n",
		"  ", "  ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  ", "  \n",
		"  ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"# ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# \n",
		"  ", "# ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  \n",
		"  ", "  ", "# " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  ", "  \n",
		"  ", "  ", "  " "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  ", "  ", "  \n",
		"  ", "  ", "  " "  ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  ", "  ", "  ", "  \n",
		"  ", "  ", "  " "  ", "  ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  ", "  ", "  ", "  ", "  \n",
		"  ", "  ", "  " "  ", "  ", "  ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "# ", "  ", "  ", "  ", "  ", "  ", "  \n",
		
	]


	mut connect_points := [
		[0, 1,13], // work
		[1, 1,12],
		[2, 1,11],
		[3, 1,10],
		[4, 1,9],
		[5, 1,8],
		[6, 1,7],
		[7, 2,6],
		// [8, 3,5],
		[8, 4,4],
		[9, 5,3],
		[10, 6,2],
		[11, 7,1],
		[12, 8,1],
		[13, 9,1],
		[14, 10,1],
		[15, 11,1],
		[16, 12,1],
		[17, 12,1],
		[18, 13,1] // work
	]

	start := time.now()
	
	for key in connect_points {
		if key[0] == first_value_angle {
			x_variable := key[1]
			y_variable := key[2]

			// draw_line(x_variable, y_variable, middle_point[0], middle_point[1], mut canvas)
			draw_line(middle_point[0], middle_point[1], x_variable, y_variable, mut canvas)
			println("$x_variable $y_variable")
		}
	}

	draw_line(middle_point[0], middle_point[1], start_point[0], start_point[1], mut canvas)

	end := time.since(start)
	println(end)
}
